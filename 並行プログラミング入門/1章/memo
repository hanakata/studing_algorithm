並行性と並列性

プロセス
    待機状態となる場合
        データの到着を待つ
        計算リソースの空きを待つ
        自発的に待機状態となる
            タイマなど

並行性
    2つ以上のプロセスが同時に計算を進めている状態

並列性
    同じ時刻で複数のプロセスが同時に計算を実行しているという状態
        複数のプロセスが同時に実行状態にあるおき、それらは並列に動作している
    ハードウェアからみた並列性は以下3つ
        タスク並列性
            複数のタスクが同時に実行されること
        データ並列性
            データを複数に分割して分割したデータに対して並列に処理を行う
                例えばベクトル[1,2,3,4]と[5,6,7,8]があった場合、演算器分同時に計算を実行すること
                    いわゆるベクトル演算
    応答速度とスループット
        応答速度＝消費CPUクロック数/CPU動作クロック周波数
        応答速度＝消費CPUインストラクション数×CPI/CPU動作クロック周波数
    アムダ―ルの法則
        並列化することで応答速度が向上する
            並列化可能な部分の処理と並列化が不可能な処理の部分と並列化に伴うオーバーヘッドによって決定される
    インストラクションレベル並列性
        プログラマが意識してこのレベルまでやることはない

並行と並列処理の必要性
    並列処理と性能向上
        必要性として単純に性能向上のため
            ただしデータ並列性とインストラクションレベル並列性はコンパイラやハードウェアが暗黙的にやってくれる
            タスク並列性はソフトウェア側でも意識する必要がある
                半導体技術の技術的限界
    並行処理の必要性と計算パス爆発
        並行処理が重要とされる理由
            計算リソースの効率的な活用
                IO待ちとかのタイミングで別の処理が動かせる
            公平性
            利便性

用語
モノ
空間的な広がりはあるが時間的な広がりはないような存在者
→特定の時間で全てが存在している
プロセス
空間と時間の両方に広がりがあるような存在者
→特定の時間では部分的にしか存在していない
本書におけるプロセスは何らかの計算を行う抽象的な計算実行体という計算に関するプロセスのみ
OSプロセス
カーネルからみたプロセス
スレッド
OSプロセス内に内包されるプロセス
CPI
Cycle Per Instructioの略。1インストラクションあたり平均何CPUサイクル消費するかの値
インストラクションレベル並列性
CPUの命令語レベルで並列化を行う手法

定義
プロセス
プロセスとは計算を実行する主体のことであり大きく分けて以下の4つの状態をとり計算を進める。
1.実行前状態：計算を実行する前の状態
2.実行状態：計算を実行中の状態
3.待機状態：計算を一時停止中の状態
4.終了状態：計算が終了した状態

並行
時刻tにおいてある複数のプロセスP0,,,Pnが計算途中状態にある
→プロセスP0,,,Pnは時刻tにおいて並行に実行されている

並列
時刻tにおいてある複数のプロセスP0,,,Pnが実行状態にある
→プロセスP0,,,Pnは時刻tにおいて並列に実行されている
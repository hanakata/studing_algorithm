並行プログラミング特有のバグと問題点

デッドロック
    食事する哲学者問題
        哲学者が円卓の周りにいてそれぞれの間に箸が一本ずつしかない場合お互いリソースを待ちあうので処理が進まないという問題
            これをデッドロックと呼ぶ

ライブロックと飢餓
    左の箸をとって右が使えなければ置く
        結局ロックする
    飢餓
        特定のプロセスのみがリソース獲得状態へ遷移しない状態のこと

銀行家のアルゴリズム
    デッドロックを回避するアルゴリズム
        デッドロックとなる状態に遷移するかをシミュレーション判定することでデッドロックを回避
        食事する哲学者問題も解決できる
            ただし動作するスレッド数と各スレッドが必要なリソースの最大値を把握しておく必要がある。

再帰ロック
    何が起きるかはロックアルゴリズムの実装に依存する
        C言語では比較的起きやすいバグ
    再入可能ミュースティック
        ロックを獲得する際に自分自身がロックを獲得しているかをチェックしロックを獲得する場合は再帰ロックのカウントをインクリメント
        ロック解放時は再帰ロックのカウントをデクリメントし0になったらロックを解放

疑似覚醒
    条件チェック必須

シグナル
    シグナルとマルチスレッドは相性が悪い
        どのタイミングでシグナルハンドラが呼び出せるかが分からないから
            シグナルを受信する専用のスレッドを用いる。

メモリバリア
    現代的なCPUでは必ずしも機械語の命令順に処理は行われない
        アウトオブオーダーと呼ぶ
        パイプライン処理時に単位時間あたりの実行命令数を向上させるため
            このアウトオブオーダーに関する諸問題から保護するための処理がメモリバリア


定義
・飢餓を引き起こす状態機械
状態機械が飢餓を引き起こす可能性がある
→あるプロセスが存在していて常にそのプロセスのリソース獲得状態へ到達可能だが、
　その状態へは決して到達しないような無限の遷移列が存在するかデッドロックとなる状態機械

・再帰ロック
ロックを獲得中のプロセスがそのロックを解放前に再度そのロックを獲得すること

・再入可能ロック
再帰ロックを行ってもデッドロック状態に陥らず処理を続行可能なロック機構のこと

・疑似覚醒
ある条件が満たされるまで待機中のプロセスが条件が満たされていないにかかわらず実行状態へ移行すること
第5章 巡回：アルゴリズムのマスターキー

グラフは一般的な構造を表すことができる強力なメンタルモデル。
グラフを使った問題として定式化できればたとえそれがグラフの問題に見えなくても
問題を解くことに一歩近づく。
グラフに関するアルゴリズムの設計にもメンタルモデルはある。
→どんな問題にも使えるマスターキーがある。
マスターキーはグラフ内のすべてのノードを探索しアクセスしていく巡回のこと。
最も有名な2つの基本的な巡回戦略は以下
・深さ優先探索
・幅優先探索

公園の中の散歩
サイクル禁止
左手の法則は歩いている人がその場で把握できる情報だけを使って実行できるよう設計されている。
実装内容は5.pyを参照（tree_walk）
迷路の例えでいえば交差点に立って左か右に行ける場合、最初に左側の迷路を巡回し次に右側の迷路を巡回する。
解を求める場合、自分の通ってきた道上を戻ることがある
→バックトラッキングと呼ぶ

無限ループから抜け出す方法
バックトラッキングしながらどんな方向にも歩き出す。同じ通りを3回以上通ることはできないとする。
そうした場合、バックトラッキングをして交差点にたどり着きまだ通っていない通りがある場合はそこを歩く。
もしそのような通りがない場合、バックトラッキングを続ける。
こういったアルゴリズムを深さ優先探索と呼ぶ。実装は5.pyを参照（rec_dfs）

深くいこう
深さ優先探索は再帰の仕組みの最も重要な性質を取り入れている。
あるノードで作業を開始すると次のノードに移る前にそのノードから到達できるすべてのノードを
巡回したかを確認する。
再帰的巡回をシミュレートするのに必要なことはスタックを使うアルゴリズムにするだけ
実装内容は5.pyを参照（iter_dfs）

深さ優先時刻とトポロジカルソート
深さ優先木はサイクルのない巡回が作る木構造でDFSの場合の呼び方。
DFS木の構造はノードの訪れる順番によって決められる。
DFS木に特有なのはノードuのすべての子孫がuが発見されてからバックトラックするまでの間に処理をされる点。

無限の迷路と最短経路
これまでDFSがある方向に行き過ぎてしまうという理由で問題になることはなかったが
迷路が大きくなると問題になりえる
またあるスタート地点のノードから他すべてのノードへの最短経路を求めたい場合、DFSではほぼ確実に間違った答えを出す。
その場合に正しく答えを出すには反復深化深さ優先探索と呼ばれ反復的に深さの制限を増やしながら制限付き深さ優先探索を実行する。
幅優先探索は一般的な巡回フレームワークで先入れ先出しキューを使えばよい。

強連結成分
強連結成分は連結成分に向きがある場合に見つけるのは厄介な問題。

第3章 数え上げ入門

総和をひとかじり
Pythonでは総和の演算を以下のように書くことが出kる
x * sum(s) = sum(x * y for y in s)
セットのようなオブジェクト上の走査を使う代わりにrangeを使って総和の境界を設定することも可能。
f(i)の総和をi=mからnまで計算するをPythonで書くと以下のようになる。
sum(f(i) for i in range(m,n+1))

総和を使ってみる
最も重要な2つの法則をまとめると
・乗法定数の分配法則
・結合法則

トーナメントに関する2つの物語
ラウンドロビントーナメント
→競技者それぞれがお互いに対戦していくトーナメント。
ノックアウトトーナメント
→競技者がペアを組み勝者のみ次のラウンドに進むトーナメント。

握手問題
ラウンドロビン問題として握手問題がある。
握手問題とはn人全員が握手する場合、何回握手が行われるかを数える問題。
→総当たりの状況で見られる現象。
このアルゴリズムの実行時間を理解するにはラウンドロビン問題を解く必要がある。
総当たりは全員×全員つまりn^2と考えると問題がある。
→自分と戦う人がいないため
なのでn(n-1)/2となる。これはΘ(n^2)
もう一つの解き方はn-1、n-2と最後の試合まで行う。
sum(i for i in range(n))となる。

ウサギとカメ
次はノックアウトトーナメント
1回線ラウンドですべての参加者がペアを組むとn/2試合がおこなわれる。
2回線ラウンドではn/4試合が行われる。
総和n/2+n/4+n/8...1もしくは1+2+4+...+n/2が得られる。

部分集合と並び替えと組み合わせ
長さがkのバイナリで表される文字列の数を計算するのは？
文字列を完全二分木の根から葉へ進んだ時のノードの並びとして表す。
文字列の長さkは木の高さで可能な文字列の数は葉の数2^kに等しくなる。
もう一つの数え方はk個の入れ子forループ内で2つの反復を実行しているともいえる。
大きさkの集合にオブジェクトが存在しているかどうかをビットで表すとなるとそれぞれの
ビットが2^k通りのうち1つを表していることになる。
→入力オブジェクトに対するすべての部分集合をチェックするアルゴリズムは
　必ず指数関数時間の計算量になるということ

再帰と漸化式
再帰とは直接もしくは間接的に自分自身を呼び出している関数のこと
再帰の例は以下
def S(seq, i=0):
    if i == len(seq):
        return 0
    return S(seq, i+1) + seq[i]
数学的に再帰的アルゴリズムの実行時間を説明するには漸化式と呼ばれる再帰的な式を使う。
再帰的アルゴリズムが前項で扱った関数Ｓのような場合、
その実行時間を表す漸化式はTのような形で定義できる。
T(n) = T(n - 1) + 1

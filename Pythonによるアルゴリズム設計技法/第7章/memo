第7章 貪欲が善って、ほんとうですか？

貪欲法は近視眼的にその場その場で良さそうな決定を下す。

一歩ずつ安全に
一般的な貪欲法を使う場面は選択の意思決定を連続して行う状況が想定される。
そのような状況下で貪欲的な動きはそれまでの背景や将来の結果を考慮せずその時に手に入る情報だけを使って最も良さそうに見える意思決定を行う。
振り返ることはなく、各選択は将来の見通しを壊さず安全であることを確認することが必須。
貪欲法を使って解く問題は徐々に解を作っていくのが典型的な方法。
解のかけらの集合を組み合わせて部分的な解を作り最終的に完全な解を作る。
解のかけらは複雑な方法で組み合わせることが可能。
次に各パズルのピースにそれぞれ値を割り振る。この値は特定のピースが解に当てはまるときに
与えられる報酬。最も高い報酬が得られるように配置することがゴール。
このようなアルゴリズムを実行するためには以下のような要素が用意されている必要がある。
・ある値がついた解となり得る要素の集合
・部分解が有効かどうかを確認する方法
部分解とは解によるピースの部分集合。
実際の例で言うとおつりを渡すアルゴリズム。

ナップサック問題
ナップサック問題とはナップサックに入れたいものがありそれには重さと価値がそれぞれ割り振られている。
一方ナップサックには最大容量があるのでその制限で持ち運べる価値を最大化する問題。
有理ナップサック問題
有理ナップサック問題は最も簡単なナップサック問題。
解き方として貪欲法をそのまま使えばよい。
整数ナップサック問題
有理ナップサック問題との違いはオブジェクトを含めるか含めないかしか選べないところ。
整数ナップサック問題は制限付きと制限なしの2種類がある。
制限付きはオブジェクトごとに個数の上限があると仮定する。
制限なしはオブジェクトを好きなだけ使うことができる。
貪欲法はどちらも使えない。

Huffmanのアルゴリズム
Huffmanのアルゴリズムは貪欲法のもう1つの典型的な例。
例えば救急センターで医療的な判断を行うために「はい」「いいえ」で答えられる問題を
用意する必要がある場合、問題を単純化して考える。

最小全域木
貪欲法の問題で最もよく知られている最小全域木を見つける問題。
最短エッジ
エッジの重みをノード間のユークリッド距離に対応させてみる。
このグラフに対して全域木を構築しようとした場合最小の重みをもつエッジを
最小全域木に含めればよい。

貪欲法は機能するが、いつ？
帰納法は一般的に貪欲法が正しいことを示すのに使えるが他にもいくつか使えるトリックがある。
ベストを残せ
解を1ステップずつ構築するときに貪欲法は常に少なくとも仮説上の最適アルゴリズムと
同じくらいの解まで到達していることを示す。
例えばリソーススケジューリング問題を解くのに役に立つ。

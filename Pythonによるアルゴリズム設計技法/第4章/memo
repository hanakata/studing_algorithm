第4章 帰納と再帰と還元

帰納、再帰、還元は抽象化の原則
・還元：ある問題を別の問題に変換すること
・帰納：自然数に対してある命題が成り立つことを示す
・再帰：関数がそれ自身を呼び出すこと

なるほど、それなら簡単だよ！
問題Ａを別の問題Ｂに還元させるには何らかの変換が必要。
その変換後、問題Ｂに対する解法が問題Ａの解法になる。
→アルゴリズムを学んだあと、新しい問題を解くときにやるようなこと

いち、に、たくさーん
帰納法は命題またはステートメントP(n)があるとしそれがどんな自然数nに対しても
成り立つことを示すことといえる。
帰納法の考え方はドミノの列が倒れるようにある時点での証明を自然数全体に伝搬させていくイメージ。

鏡よ鏡
帰納法ではベースケースから始め帰納ステップを使ってサイズがnの問題全体でも仮定が成り立つことを示す。
再帰は問題を分解していくアプローチ。
ある意味で帰納法は再帰が使える理由を説明し再帰は帰納法の実装の簡単な方法を示しているといえる
帰納と再帰はお互いに密接に関係しているので帰納的な考えを再帰的に実装することもできる場合がある。
たいていループを使う方が再帰を使うよりオーバヘッドが少なく早い。
またほとんどの言語に再帰の実行回数に制限がある。
以下はその例。
>>> def trav(seq,i=0):
...     if i==len(seq): return
...     trav(seq,i+1)
...
>>> trav(range(100))→これならOK
>>> trav(range(1000))→こっちは最大深度を超えることでNG
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in trav
  File "<stdin>", line 3, in trav
  File "<stdin>", line 3, in trav
  [Previous line repeated 995 more times]
  File "<stdin>", line 2, in trav
RecursionError: maximum recursion depth exceeded while calling a Python object
>>>
そのため再帰を使って書きやすい場合でも使えない場合もある。

帰納法と再帰を使って設計する
最大置換問題
8人のばらばらな趣向を持つ人が映画のチケットを買ったとする。
あるものは座席位置に満足しているが、たいていの人は不満を持っている。
それぞれのお気に入りの席と交換してもらうという問題。
この問題はマッチング問題の一種。
この問題はグラフとして表現できる。エッジの矢印は移動したい席を示す。
アルゴリズムを設計する前に問題を定式化する必要がある。
この例の場合はできるだけ多くの人を希望している席に座らせること。
最初のステップはどこに還元があるのか、どうしたら問題を小さくできるか

セレブ問題
セレブ問題とは群衆の中からセレブを見つけること。
考え方は以下の通り
セレブは誰も知りませんがみんなセレブのことを知っている。
似たような問題とすれば依存関係の集合を調べてどれがスタートかを見つけるような問題。
問題の核心はグラフで表現できる。

トポロジカルソート
ほとんどのプロジェクトで実行するタスクには順序を一部制限するような依存関係がある。
そのような依存関係は有向非巡回グラフとして簡単にあらわされる。
依存関係を遵守する順序をみつけることはトポロジカルソートと呼ぶ。
トポロジカルソートの問題はある程度複雑なコンピュータシステムで多発する。

強い仮定
アルゴリズムを設計するときのデフォルトの帰納仮説はこれによってより小さいインスタンスを解くことができるというもの
バランス係数は平衡木などに使われていて木や部分木がどれほどバランスがとれているかを測る。
バランス係数の計算は難しいアルゴリズムではない。
バランス係数を根に対して計算するには問題を部分木に対して再帰的に解き
全体の解を算出するためにその部分解を拡張したり組み合わせたりする必要がある。
ただしうまくいかない。→ここで部分問題に対する解が次の帰納ステップを作るのに十分な情報を含んでいないため
小さな部分問題を解ける帰納仮説が役に立たない。
この問題は仮定を強めることで解くことができる。

不変式と正しさ
完成したアルゴリズムを提示しちゃんと動くことを示す必要がある。
反復を使ったアルゴリズムに対しては再帰的に考えることもできるが
反復処理に直接適用できるループ不変式という概念がある。
ループ不変式とはいくつかの前提条件が与えられ、ループ内で反復操作を行った後も
真が成り立つ式。
不変とは最初から最後までそれが変わらないこと。

緩和とゆっくりとした改善
緩和という言葉は数学の世界でいろいろな意味を持っている。
が、アルゴリズム設計者がそれをいくつかのアルゴリズムの重要なステップに取り入れる。
